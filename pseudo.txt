# pseudo.txt, a text file outlining the objects and algorithms for implementing chess with ncurses python wrapper

Runner: game.py
	a functional method to
	- inst board obj
	- inst pieces obj
	- window.display()

Class Board: board.py
	a class to hold abstractions of the board
	- param boardarray = [8][8] of alive pieces
	- param turn = int turn number
	- param white_cap = [] of white pieces captured by black
	- param black_cap = [] of black pieces captured by white
	- func [(i, j), Piece]  parse_move(str move):
		find which piece was moved
		validate the move
		trigger self.update

Class Piece: piece.py
	a general class file for all the game pieces
	- param () index = i, j
	- param int color = ? 0 : 1
	- abs param char type
	- abs func [(i, j),] get_moves()

	class King(Piece): king.py
		king class implements the abstracts of piece
		- param super index
		- param super int color
		- param super char type = 'K'
		- super func [(i, j),] get_moves():
			possible = [(i, j), (i+1, j), (i-1, j), (i, j+1), (i, j-1)]
			for point in possible:
				if point in board.pieces() or point in 
					index = (i, j)
		

Class Window: window.py
	a class file for the ncurses window
	- param Board board
	- param int maxlines, int maxcols
	- func void initscr():
		#init ncurses
		
		init stdscr
		refresh
	- func void display(Board board):
		draw 8x8 checkered grid
		for i in 8:
			for j in 8:
				addchar(i*size + y_offset, j*size + x_offset, piece[i][j].char)
		
